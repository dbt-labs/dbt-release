# **what?**
# Build release artifacts
#
# Expected build artifact layout:
#
# ├── dist
# │   ├── dbt-*.tar.gz
# │   ├── dbt-*.whl
# └── <release_notes>.md
#
#
# Inputs:
#  sha:                  The commit to attach to this release
#  version_number:       The release version number (i.e. 1.0.0b1, 1.2.3rc2, 1.0.0)
#  changelog_path:       Path to the changelog file for release notes
#  build_script_path:    Path to the build script
#  package_test_command: Command to use to check package runs
#  test_run:             Test run (Bucket to upload the artifact)
#  nightly_release:      Identifier that this is nightly release
#
# **why?**
# Reusable and consistent build process.
#
# **when?**
# Call after a successful version bump up.
# This workflow expects that the package version is bumped and the associated changelog living in sources.
#
# Validation Checks
#
#  1. Make sure the sha has a changelog entry for this version and the version bump has been completed.


name: Build

on:
  workflow_call:
    inputs:
      sha:
        required: true
        type: string
      version_number:
        required: true
        type: string
      changelog_path:
        required: true
        type: string
      build_script_path:
        required: true
        default: "scripts/build-dist.sh"
        type: string
      s3_bucket_name:
        required: true
        default: "deprecated - DO NOT USE"
        type: string
      package_test_command:
        required: true
        default: "dbt --version"
        type: string
      test_run:
        required: false
        default: true
        type: boolean
      nightly_release:
        required: false
        default: false
        type: boolean


permissions:
  contents: write

env:
  ARTIFACT_RETENTION_DAYS: 2
  PYTHON_TARGET_VERSION: 3.9
  NOTIFICATION_PREFIX: "[Build]"

jobs:
  log-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: "[DEBUG] Print Variables"
        run: |
          # WORKFLOW INPUTS
          echo The last commit sha in the release: ${{ inputs.sha }}
          echo The release version number:         ${{ inputs.version_number }}
          echo The changelog path:                 ${{ inputs.changelog_path }}
          echo The build script path:              ${{ inputs.build_script_path }}
          # this field is still an input but it's not used anywhere
          # leaving it in to not have to modify all the dependent workflows
          echo The s3 bucket name:                 ${{ inputs.s3_bucket_name }}
          echo The package test command:           ${{ inputs.package_test_command }}
          echo Test run:                           ${{ inputs.test_run }}
          echo Nightly release:                    ${{ inputs.nightly_release }}
          # ENVIRONMENT VARIABLES
          echo GitHub artifact retention days:     ${{ env.ARTIFACT_RETENTION_DAYS }}
          echo Python target version:              ${{ env.PYTHON_TARGET_VERSION }}
          echo Notification prefix:                ${{ env.NOTIFICATION_PREFIX }}

  audit-version-changelog:
    # Make sure the changelog has been generated and the version is up to date
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout ${{ github.repository }} Commit ${{ inputs.sha }}"
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}

      - name: "Audit Version And Parse Into Parts"
        id: semver
        uses: dbt-labs/actions/parse-semver@v1.1.0
        with:
          version: ${{ inputs.version_number }}

      - name: "Audit Changelog Exists"
        run: |
          title="Audit Changelog Exists"
          if test -f ${{ inputs.changelog_path }}
          then
            message="Specified file ${{ inputs.changelog_path }} - exists."
            echo "::notice title=${{ env.NOTIFICATION_PREFIX }}: $title::$message"
          else
            message="Specified file ${{ inputs.changelog_path }} does not exist! The changelog for this release must exist before running this workflow."
            git status
            echo "::error title=${{ env.NOTIFICATION_PREFIX }}: $title::$message"
            exit 1
          fi

      - name: "Check Current Version In Code"
        id: set_status
        run: |
          title="Check Current Version In Code"
          if grep -Fxq "current_version = ${{ inputs.version_number }}" .bumpversion.cfg
          then
            message="Version set to ${{ inputs.version_number }}."
            echo "::notice title=${{ env.NOTIFICATION_PREFIX }}: $title::$message"
          else
            message="Version not set to ${{ inputs.version_number }}. The version bump workflow must be complete before running this workflow."
            git status
            echo "::error title=${{ env.NOTIFICATION_PREFIX }}: $title::$message"
            exit 1
          fi

  unit:
    name: Unit Test
    runs-on: ubuntu-latest
    needs: [audit-version-changelog]

    env:
      TOXENV: "unit"

    steps:
      - name: "Checkout ${{ github.repository }} Commit ${{ inputs.sha }}"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          ref: ${{ inputs.sha }}

      - name: "Set up Python - ${{ env.PYTHON_TARGET_VERSION }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_TARGET_VERSION }}

      - name: "Install Spark Dependencies"
        if: ${{ contains(github.repository, 'dbt-labs/dbt-spark') }}
        run: |
          sudo apt-get update
          sudo apt-get install libsasl2-dev

      - name: "Install Python Dependencies"
        run: |
          python -m pip install --user --upgrade pip
          python -m pip install tox
          python -m pip --version
          python -m tox --version

      - name: "Run Tox"
        run: tox

  build-packages:
    runs-on: ubuntu-latest
    needs: [unit]

    steps:
      - name: "Checkout Commit - ${{ inputs.sha }}"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          ref: ${{ inputs.sha }}

      - name: "Set up Python - ${{ env.PYTHON_TARGET_VERSION }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_TARGET_VERSION }}

      - name: "Install Python Dependencies"
        run: |
          python -m pip install --user --upgrade pip
          python -m pip install --upgrade setuptools wheel twine check-wheel-contents
          python -m pip --version

      - name: "Build Distributions - ./${{ inputs.build_script_path }}"
        run: ./${{ inputs.build_script_path }}

      - name: "[DEBUG] Show Distributions"
        run: ls -lh dist/

      - name: "Check Distribution Descriptions"
        run: |
          twine check dist/*

      - name: "[DEBUG] Check Wheel Contents"
        run: |
          check-wheel-contents dist/*.whl --ignore W007,W008

      - name: "Upload Build Artifact - ${{ inputs.version_number }}"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.version_number }}
          path: |
            ${{ inputs.changelog_path }}
            ./dist/
            !dist/dbt-${{ inputs.version_number }}.tar.gz
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  test-build:
    runs-on: ubuntu-latest
    needs: [build-packages]

    steps:
      - name: "Set up Python - ${{ env.PYTHON_TARGET_VERSION }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_TARGET_VERSION }}

      - name: "Install Python Dependencies"
        run: |
          python -m pip install --user --upgrade pip
          python -m pip install --upgrade wheel
          python -m pip --version

      - name: "Download Build Artifact - ${{ inputs.version_number }}"
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.version_number }}
          path: .

      - name: "[DEBUG] Display Structure Of All Downloaded Files"
        run: ls -R

      - name: "[DEBUG] Show Distributions"
        run: ls -lh dist/

      - name: "Install Wheel Distributions"
        run: |
          find ./dist/*.whl -maxdepth 1 -type f | xargs python -m pip install --force-reinstall --find-links=dist/

      - name: "[DEBUG] Check Wheel Distributions"
        run: |
          ${{ inputs.package_test_command }}

      - name: "Install Source Distributions"
        run: |
          find ./dist/*.gz -maxdepth 1 -type f | xargs python -m pip install --force-reinstall --find-links=dist/

      - name: "[DEBUG] Check Source Distributions"
        run: |
          ${{ inputs.package_test_command }}
