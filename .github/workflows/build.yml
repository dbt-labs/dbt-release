name: build dbt
# in the future, we could put most of this (everything except release parsing)
# in the `dbt` repository and use repository_dispatch to trigger it with the
# release information as arguments. Then we could have that build a release,
# etc.
on: push

jobs:
  build-wheels:
    name: Build the wheels based on the releases file
    runs-on: ubuntu-18.04
    container: fishtownanalytics/test-container:7
    steps:
      - uses: actions/checkout@v2
        with:
          repository: fishtown-analytics/dbt
          path: build/dbt
      - name: Look for new build requests and build wheels
        run: python3.8 ./scripts/build-from-releases.py package
      - name: List my data
        run: ls dist/
      - name: Upload packages
        uses: actions/upload-artifact@v2
        with:
          name: packages
          path: ./artifacts/dist
      - name: Upload releasefile
        uses: actions/upload-artifact@v2
        with:
          name: releasefile
          path: ./artifacts/release.txt
  # The unit tests won't be informative, but the integration tests should be
  test-postgres:
    name: Run postgres tests
    needs: build-wheels
    runs-on: ubuntu-18.04
    container: fishtownanalytics/test-container:7
    services:
      database:
        image: postgres
        env:
          POSTGRES_USER: "root"
          POSTGRES_PASSWORD: "password"
          POSTGRES_DB: "dbt"
        # straight out of the github actions UI.
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      # TODO: mkdir required?
      - name: Check out dbt
        uses: actions/checkout@v2
        with:
          repository: fishtown-analytics/dbt
          path: build/dbt
      # TODO: mkdir required?
      - name: Download releasefile
        uses: actions/download-artifact@v2
        with:
          name: releasefile
          path: artifacts/release.txt
      - name: Download packages
        uses: actions/download-artifact@v2
        with:
          name: packages
          path: artifacts/dist
      - name: Setup postgres
        run: bash ./test/setup_db.sh
        environment:
          PGHOST: database
          PGUSER: root
          PGPASSWORD: password
          PGDATABASE: postgres
      - name: Run tests
        run: python3.8 ./scripts/build-from-releases.py test postgres
      - name: Run RPC tests
        run: python3.8 ./scripts/build-from-releases.py test rpc
