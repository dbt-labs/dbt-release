# **what?**
# After releasing to GitHub, release to PyPI
#
# Inputs:
#   tag: tag of release in the format v1.2.3rc1
#   test_run: true is releasing to test PyPI, otherwise false
#
# **why?**
# Automate the release process
#
# **when?**
#  After successfully releasing to GitHub
#
# Assumptions
#  1.  The name of the repository is the name of the package on PyPI
#

name: PyPI release

on:
  workflow_call:
    inputs:
      version_number:
        description: "The tag for the release (ie. v1.0.0b1)"
        required: true
        type: string
      test_run:
        required: true
        type: string
    # pass through secrets for both PyPi Test and Prod so they're always there
    secrets:
      PYPI_API_TOKEN:
        description: AWS Access Key ID
        required: true
      TEST_PYPI_API_TOKEN:
        description: Test Pypi api token
        required: true

permissions:
  contents: read

jobs:
  log-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: "[DEBUG] Print Variables"
        run: |
          echo The release version number: ${{ inputs.version_number }}
          echo Release to test PyPI:       ${{ inputs.test_run }}

  check-pypi-exists:
    runs-on: ubuntu-latest

    outputs:
      exists: ${{ steps.set_existence.outputs.exists }}

    steps:
      - name: Check PyPI
        id: pypi_info
        uses: dbt-labs/actions/py-package-info@users/alexander-smolyakov/py-package-info-add-ability-to-select-package-index
        with:
          package: ${{ github.event.repository.name }}
          version: ${{ inputs.version_number }}
          check-test-index: ${{ inputs.test_run }}

      - name: Set Outputs
        # The above step will just use the latest version if the input version
        # is not found.  So to validate the version we want to release exists
        # we need to compare the output version.
        id: set_existence
        run: |
          if [[ ${{ steps.pypi_info.outputs.version }} != ${{ inputs.version_number }} ]]
          then
            echo PyPI Package not found for ${{ inputs.version_number }}
            echo '::set-output name=exists::false'
          else
            echo PyPI Package found for ${{ inputs.version_number }}.  Skip release.
            echo '::set-output name=exists::true'
          fi

  skip-pypi-release:
    runs-on: ubuntu-latest
    needs: [check-pypi-exists]
    if: needs.check-pypi-exists.outputs.exists == 'true'

    steps:
      - name: PyPI Release Exists, Skip
        run: echo A release already exists for this version ${{ inputs.version_number }} on Pypi, skipping

  test-pypi-release:
    runs-on: ubuntu-latest
    needs: [check-pypi-exists]
    if: ${{ inputs.test_run == true }}

    environment: PypiTest

    steps:
      - name: "Download Build Artifact - ${{ inputs.version_number }}"
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.version_number }}
          path: .

      - name: "Publish Distribution To Test PyPI"
        uses: pypa/gh-action-pypi-publish@v1.5
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

  prod-pypi-release:
    runs-on: ubuntu-latest
    needs: [check-pypi-exists]
    if: ${{ inputs.test_run == false }}

    environment: PypiProd

    steps:
      - name: "Download Build Artifact - ${{ inputs.version_number }}"
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.version_number }}
          path: .

      - name: "Publish Distribution To PyPI"
        uses: pypa/gh-action-pypi-publish@v1.5
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  validate-pypi-package:
    runs-on: ubuntu-latest
    needs: [test-pypi-release, prod-pypi-release]
    # always run this step because one of the needs are always skipped.
    if: always()

    steps:
      - name: "Sanitize Package Name"
        id: package-name
        run: |
          repo_name=${{ github.event.repository.name }}
          test_suffix="-release-test"
          name=${repo_name%"$test_suffix"}
          echo "name=$name" >> $GITHUB_OUTPUT

      
      - name: Check PyPI
        id: pypi_info
        uses: dbt-labs/actions/py-package-info@users/alexander-smolyakov/py-package-info-add-ability-to-select-package-index
        with:
          package: ${{ steps.package-name.outputs.name }}
          version: ${{ inputs.version_number }}
          check-test-index: ${{ inputs.test_run }}

      - name: Set output
        # The above step will just use the latest version if the input version
        # is not found.  So to validate the version we want to release exists
        # we need to compare teh output version.
        id: set_existence
        run: |
          if [[ ${{ steps.pypi_info.version }} != ${{ inputs.version_number }} ]]
          then
            echo ${{ inputs.version_number }} released to Pypi
          else
            echo ${{ inputs.version_number }} FAILED to released to Pypi.  Manual intervention required.
            exit 1
          fi
