name: Internal Archive Release

on:
  workflow_call:
    inputs:
      dbms_name:
        description: "The warehouse name for the adapter."
        type: string
        required: true
      version_number:
        description: "The release version number (i.e. 1.0.0b1)"
        type: string
        required: true
      package_test_command:
        description: "Package test command"
        type: string
        required: true

permissions: read-all

# will cancel previous workflows triggered by the same event and for the same ref for PRs or same SHA otherwise
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ contains(github.event_name, 'pull_request') && github.event.pull_request.head.ref || github.sha }}-${{ inputs.deploy-to }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  PYTHON_TARGET_VERSION: 3.11
  NOTIFICATION_PREFIX: "[Internal Archive Release]"

jobs:
  job-setup:
    name: Job Setup
    runs-on: ubuntu-latest
    outputs:
      main_sha: ${{ steps.set_sha.outputs.main_sha }}
    steps:
      - name: "[DEBUG] Print Variables"
        run: |
          echo Warehouse name:                     ${{ inputs.dbms_name }}
          echo The release version number:         ${{ inputs.version_number }}
          echo Package test command:               ${{ inputs.package_test_command }}

      - name: "Checkout main branch"
        uses: actions/checkout@v4
        with:
          ref: main

      # Will be the last sha on the main branch
      - name: "Capture sha"
        id: set_sha
        run: |
          echo "main_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

  run-tests:
    name: Run tests on sha before releasing
    runs-on: ubuntu-latest
    needs: [job-setup]
    steps:
      - name: "Run tests"
        run: |
          echo "placeholder"

  create-internal-release:
    name: Create release for internal archive
    runs-on: ubuntu-latest
    needs: [run-tests]

    steps:
      - name: "Checkout Commit - ${{ needs.job-setup.outputs.main_sha }}"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          ref: ${{ needs.job-setup.outputs.main_sha }}

      - name: "Set up Python - ${{ env.PYTHON_TARGET_VERSION }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_TARGET_VERSION }}

      - name: "Install Python Dependencies"
        run: |
          python -m pip install --user --upgrade pip
          python -m pip install --upgrade setuptools wheel twine check-wheel-contents
          python -m pip --version

      - name: "Alter version in metadata of python package"
        run: |
          version_file="$(echo "dbt/adapters/${{ inputs.dbms_name }}/__version__.py")"
          current_version="$(grep 'version =' "${version_file}" | cut -d '"' -f2)"

          echo ">>> Altering ${version_file}"
          if [[ $current_version =~ (.*build)([0-9]+)$ ]]; then
              base="${BASH_REMATCH[1]}"
              number="${BASH_REMATCH[2]}"
              new_number=$((number + 1))
              tee <<< "version = \"${base}${new_number}\"" "${version_file}"
          else
              tee <<< "version = \"${current_version}+build1\"" "${version_file}"
          fi

      - name: "Build Distributions - scripts/build-dist.sh"
        run: scripts/build-dist.sh

      - name: "[DEBUG] Show Distributions"
        run: ls -lh dist/

      - name: "Check Distribution Descriptions"
        run: |
          twine check dist/*

      - name: "[DEBUG] Check Wheel Contents"
        run: |
          check-wheel-contents dist/*.whl --ignore W007,W008

      - name: "Configure AWS profile for upload"
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} --profile ${{ secrets.AWS_PROFILE_NAME }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --profile ${{ secrets.AWS_PROFILE_NAME }}
          aws configure set region ${{ secrets.AWS_REGION }} --profile ${{ secrets.AWS_PROFILE_NAME }}
          aws configure set output text --profile ${{ secrets.AWS_PROFILE_NAME }}
          aws codeartifact login --tool twine --repository ${{ secrets.AWS_REPOSITORY }} --domain ${{ secrets.AWS_DOMAIN }} --domain-owner ${{ secrets.AWS_DOMAIN_OWNER }} --region ${{ secrets.AWS_REGION }} --profile ${{ secrets.AWS_PROFILE_NAME }}

      - name: "Set the version of the artifact with build number"
        run: |
          version_file="$(echo "dbt/adapters/redshift/__version__.py")"
          new_version="$(grep 'version =' "${version_file}" | cut -d '"' -f2)"
          echo "Altering generated artifacts to internal build convention using tag [${new_version}]"

          # leave off " to glob
          # mv dist/*.tar.gz "dist/dbt-redshift-${new_version}.tar.gz"
          # mv dist/*.whl "dist/dbt_redshift-${new_version}-py3-none-any.whl"

      - name: "Upload Build Artifact - ${{ inputs.version_number }}"
        run: |
          twine upload --repository codeartifact dist/*

          version_file="$(echo "dbt/adapters/${{ inputs.dbms_name }}/__version__.py")"
          version="$(grep 'version =' "${version_file}" | cut -d '"' -f2)"
          echo "-- Success -- released ${version}"
