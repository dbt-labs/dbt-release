# **what?**
# Perform the version bump, generate the changelog and run tests.
#
# Inputs:
#  sha: the commit to attach to this release
#  version_number: version number for the release (ex: 1.2.3rc2)
#  target_branch: The branch that we will release from
#
# Outputs:
#   final_sha: The sha that will actually be released.  This can differ from the
#              input sha if adding a version bump and/or changelog
#   changelog_path: path to the changelog file (ex .changes/1.2.3-rc1.md)
#
# **why?**
# Reusable and consistent GitHub release process.
#
# **when?**
# Call when ready to kick off a build and release
#
# Validation Checks
#
#  1. Bump the version if it has not been bumped
#  2. Generate the changelog (via changie) if there is no markdown file for this version
#

name: Version Bump and Changelog Generation

on:
  workflow_call:
    inputs:
      sha:
        required: true
        type: string
      version_number:
        required: true
        type: string
      target_branch:
        required: true
        type: string
      test_run:
        required: false
        default: true
        type: boolean
    outputs:
      final_sha:
        description: The new commit that includes the changelog and version bump.
        value: ${{ jobs.get-release-sha.outputs.final_sha }}
      changelog_path:
        description: The path to the changelog for this version
        value: ${{ jobs.audit-changelog.outputs.changelog_path }}

permissions:
  contents: write

env:
  PYTHON_TARGET_VERSION: 3.8
  NOTIFICATION_PREFIX: "[Release Preparation]"

jobs:
  log-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Print variables
        run: |
          # WORKFLOW INPUTS
          echo The last commit sha in the release:   ${{ inputs.sha }}
          echo The release version number:           ${{ inputs.version_number }}
          echo The branch that we will release from: ${{ inputs.target_branch }}
          echo Test run:                             ${{ inputs.test_run }}
          # ENVIROMENT VARIABLES
          echo Python target version:                ${{ env.PYTHON_TARGET_VERSION }}
          echo Notification prefix:                  ${{ env.NOTIFICATION_PREFIX }}

  audit-changelog:
    runs-on: ubuntu-latest
    outputs:
      changelog_path: ${{ steps.set_path.outputs.changelog_path }}
      exists: ${{ steps.set_existence.outputs.exists }}
      base_version: ${{ steps.semver.outputs.base-version }}
      prerelease: ${{ steps.semver.outputs.pre-release }}
      is_prerelease: ${{ steps.semver.outputs.is-pre-release }}

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.sha }}

      - name: Audit Version and Parse Into Parts
        id: semver
        uses: dbt-labs/actions/parse-semver@v1
        with:
          version: ${{ inputs.version_number }}

      - name: Set Changelog Path
        id: set_path
        run: |
          path=".changes/"
          if [[ ${{ steps.semver.outputs.is-pre-release }} -eq 1 ]]
          then
            path+="${{ steps.semver.outputs.base-version }}-${{ steps.semver.outputs.pre-release }}.md"
          else
            path+="{{ steps.semver.outputs.version }}.md"
          fi
          echo "changelog_path=$path" >> $GITHUB_OUTPUT

      - name: Set Changelog Existence for Other Jobs
        id: set_existence
        run: |
          if test -f ${{ steps.set_path.outputs.changelog_path }}
          then
            echo "exists=true">> $GITHUB_OUTPUT
          else
            echo "exists=false">> $GITHUB_OUTPUT
          fi

      - name: Job Output
        run: |
          echo changelog_path ${{ steps.set_path.outputs.changelog_path }}
          echo exists ${{ steps.set_existence.outputs.exists }}
          echo base_version ${{ steps.semver.outputs.base-version }}
          echo prerelease ${{ steps.semver.outputs.pre-release }}
          echo is_prerelease ${{ steps.semver.outputs.is-pre-release }}

  check-current-version:
    runs-on: ubuntu-latest
    outputs:
      up_to_date: ${{ steps.set_status.outputs.up_to_date }}

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.sha }}

      - name: Check Current Version in code
        id: set_status
        run: |
          if grep -Fxq "current_version = ${{ inputs.version_number }}" .bumpversion.cfg
          then
            echo "up_to_date=true" >> $GITHUB_OUTPUT
          else
            echo "up_to_date=false" >> $GITHUB_OUTPUT
          fi

      - name: Job Output
        run: echo up_to_date ${{ steps.set_status.outputs.up_to_date }}

  skip-generate-changelog:
    runs-on: ubuntu-latest
    needs: [audit-changelog]
    if: needs.audit-changelog.outputs.exists == 'true'

    steps:
      - name: Changelog Exists, Skip Generating New Changelog
        run: echo A changelog file already exists at ${{ needs.audit-changelog.outputs.exists }}, skipping generating changelog

  skip-version-bump:
    runs-on: ubuntu-latest
    needs: [check-current-version]
    if: needs.check-current-version.outputs.up_to_date == 'true'

    steps:
      - name: Version Already bumped
        run: echo The version has already been bumped to ${{ inputs.version_number }}, skipping version bump

  create-new-branch:
    outputs:
      branch_name: ${{steps.variables.outputs.BRANCH_NAME}}
    runs-on: ubuntu-latest
    needs: [audit-changelog, check-current-version]
    if: needs.audit-changelog.outputs.exists == 'false' || needs.check-current-version.outputs.up_to_date == 'false'

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.sha }}

      - name: "Generate Branch Name"
        id: variables
        run: |
          name="prep-release/"
          if [[ ${{ inputs.test_run }} == true ]]
          then
            name+="test-run/"
          fi
          name+="${{ inputs.version_number }}_$GITHUB_RUN_ID"
          echo "BRANCH_NAME=$name" >> $GITHUB_OUTPUT

      - name: Create branch
        run: |
          git checkout -b ${{steps.variables.outputs.BRANCH_NAME}}
          git push -u origin ${{steps.variables.outputs.BRANCH_NAME}}

      - name: Job Output
        run: echo BRANCH_NAME ${{ steps.variables.outputs.BRANCH_NAME }}

  generate-changelog-bump-version:
    runs-on: ubuntu-latest
    needs: [audit-changelog, check-current-version, create-new-branch]

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          ref: ${{needs.create-new-branch.outputs.BRANCH_NAME}}

      - name: Add Homebrew to PATH
        run: |
          echo "/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin" >> $GITHUB_PATH

      - name: Install spark dependencies
        if: ${{ github.repository == 'dbt-labs/dbt-spark' }}
        run: |
          sudo apt-get install libsasl2-dev

      - name: Install Homebrew Packages
        if: needs.audit-changelog.outputs.exists == 'false'
        run: |
          brew install pre-commit
          brew tap miniscruff/changie https://github.com/miniscruff/changie
          brew install changie

      - name: Generate Release Changelog
        if: needs.audit-changelog.outputs.exists == 'false'
        run: |
          if [[ ${{ needs.audit-changelog.outputs.is_prerelease }} -eq 1 ]]
          then
            changie batch ${{ needs.audit-changelog.outputs.base_version }} --move-dir '${{ needs.audit-changelog.outputs.base_version }}' --prerelease ${{ needs.audit-changelog.outputs.prerelease }}
          else
            changie batch ${{ needs.audit-changelog.outputs.base_version }}  --include '${{ needs.audit-changelog.outputs.base_version }}' --remove-prereleases
          fi
          changie merge
          git status

      # this step will fail on whitespace errors but also correct them
      - name: Remove trailing whitespace
        continue-on-error: true
        run: |
          pre-commit run trailing-whitespace --files .bumpversion.cfg CHANGELOG.md .changes/*
          git status

      # this step will fail on newline errors but also correct them
      - name: Removing extra newlines
        continue-on-error: true
        run: |
          pre-commit run end-of-file-fixer --files .bumpversion.cfg CHANGELOG.md .changes/*
          git status

      - name: Check Changelog Created Successfully
        if: needs.audit-changelog.outputs.exists == 'false'
        run: |
          if [[ -f ${{ needs.audit-changelog.outputs.changelog_path }} ]]
          then
            echo Changelog file created successfully
          else
            echo Changelog failed to generate.  Exiting.
            exit 1
          fi

      - uses: actions/setup-python@v2
        if: needs.check-current-version.outputs.up_to_date == 'false'
        with:
          python-version: ${{ env.PYTHON_TARGET_VERSION }}"

      - name: Install python dependencies
        if: needs.check-current-version.outputs.up_to_date == 'false'
        run: |
          python3 -m venv env
          source env/bin/activate
          python -m pip install --upgrade pip

      - name: Bump version
        if: needs.check-current-version.outputs.up_to_date == 'false'
        # note: bumpversion is no longer supported, it actually points to bump2version now
        run: |
          source env/bin/activate
          python -m pip install -r dev-requirements.txt
          env/bin/bumpversion --allow-dirty --new-version ${{ inputs.version_number }} major
          git status

      - name: Commit & Push changes
        run: |
          #Data for commit
          user="Github Build Bot"
          email="buildbot@fishtownanalytics.com"
          commit_message="Bumping version to ${{ inputs.version_number }} and generate changelog"
          #Commit changes to branch
          git config user.name "$user"
          git config user.email "$email"
          git pull
          git add .
          git commit -m "$commit_message"
          git push

  run-unit-tests:
    runs-on: ubuntu-latest
    needs: [create-new-branch, generate-changelog-bump-version]

    env:
      TOXENV: unit

    steps:
      - name: "Checkout ${{ github.repository }} Branch ${{ needs.create-new-branch.outputs.BRANCH_NAME }}"
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.create-new-branch.outputs.BRANCH_NAME }}

      - name: "Set up Python - ${{ env.PYTHON_TARGET_VERSION }}"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_TARGET_VERSION }}

      - name: "Install Python Dependencies"
        run: |
          python -m pip install --user --upgrade pip
          python -m pip install tox
          python -m pip --version
          python -m tox --version

      - name: "Run Tox"
        run: tox

  # run-integration-tests:
  #   runs-on: ubuntu-latest
  #   needs: [create-new-branch, generate-changelog-bump-version]

  #   env:
  #     TOXENV: integration

  #   steps:
  #     - name: "Checkout ${{ github.repository }} Branch ${{ needs.create-new-branch.outputs.BRANCH_NAME }}"
  #       uses: actions/checkout@v3
  #       with:
  #         ref: ${{ needs.create-new-branch.outputs.BRANCH_NAME }}

  #     - name: "Set up Python - ${{ env.PYTHON_TARGET_VERSION }}"
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ env.PYTHON_TARGET_VERSION }}

  #     - name: "Install python tools"
  #       run: |
  #         python -m pip install --user --upgrade pip
  #         python -m pip --version
  #         python -m pip install tox
  #         tox --version

  #     - name: Run tests
  #       run: tox

  merge-for-release:
    runs-on: ubuntu-latest
    needs: [run-unit-tests, create-new-branch]
    if: ${{ inputs.test_run == false }}

    steps:
      - name: Log Values
        run: |
          echo inputs.target_branch ${{ inputs.target_branch }}
          echo needs.create-new-branch.outputs.BRANCH_NAME ${{ needs.create-new-branch.outputs.BRANCH_NAME }}

      - name: Check out target branch
        uses: actions/checkout@v3

      - name: Merge changes with target branch
        uses: everlytic/branch-merge@1.1.2
        with:
          source_ref: ${{ needs.create-new-branch.outputs.BRANCH_NAME }}
          target_branch: ${{ inputs.target_branch }}
          github_token: ${{ secrets.GITHUB_TOKEN }} # TODO: probably need to use a custom PAT to override ``.latest`` protection rules
          commit_message_template: "[Automated] Merged {source_ref} into target {target_branch} during release process"

  get-release-sha:
    # Get the sha that will be released.  If the changelog already exists on the input sha and the version has already been bumped,
    # then it is what we will release. Otherwise we generated a changelog and did the version bump in this workflow and there is a
    # new sha to use from the merge we just did.  Grab that here instead.
    outputs:
      final_sha: ${{ steps.final_sha.outputs.final_sha }}
    runs-on: ubuntu-latest
    needs:
      [
        create-new-branch,
        merge-for-release,
        audit-changelog,
        check-current-version,
      ]
    # always run this job, regardness of if the dependant jobs were skipped
    if: always()

    steps:
      - name: Log Inputs
        run: |
          echo target_branch: ${{ inputs.target_branch }}
          echo new branch: ${{ needs.create-new-branch.outputs.BRANCH_NAME }}
          echo changelog exists: ${{ needs.audit-changelog.outputs.exists }}
          echo version up to date: ${{ needs.check-current-version.outputs.up_to_date }}

      - name: Check out target branch - ${{ needs.create-new-branch.outputs.BRANCH_NAME }}
        if: ${{ inputs.test_run == true }}
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.create-new-branch.outputs.BRANCH_NAME }}

      - name: Check out target branch - ${{ inputs.target_branch }}
        if: ${{ inputs.test_run == false }}
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.target_branch }}

      - name: Log branch
        run: git status

      - name: Set sha for release
        id: final_sha
        run: |
          commit_sha=""
          if [[ ${{ needs.audit-changelog.outputs.exists }} == false ]] || [[ ${{ needs.check-current-version.outputs.up_to_date }} == false ]]
          then
            commit_sha=$(git rev-parse HEAD)
          else
            commit_sha=${{ inputs.sha }}
          fi
          echo "final_sha=$commit_sha" >> $GITHUB_OUTPUT

      - name: Job Output
        run: echo final_sha ${{ steps.final_sha.outputs.final_sha }}
